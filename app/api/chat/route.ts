import { smoothStream, streamText } from 'ai';
import { deepseek } from '@ai-sdk/deepseek';
import { ChatSDKError } from '@/lib/errors';
import { searchDocs, formatSections } from '@/lib/json-rag';

export const maxDuration = 60;

const isProductionEnvironment = process.env.NODE_ENV === 'production';

function generateUUID(): string {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
    const r = (Math.random() * 16) | 0;
    const v = c === 'x' ? r : (r & 0x3) | 0x8;
    return v.toString(16);
  });
}

const systemPromptTemplate = `
‰Ω†ÊòØ‰∏Ä‰∏™‰∏ì‰∏öÁöÑÊñáÊ°£Âä©ÊâãÔºå‰∏ìÈó®Â∏ÆÂä©Áî®Êà∑ÁêÜËß£Âíå‰ΩøÁî®È°πÁõÆÊñáÊ°£„ÄÇ

## Â∑•‰ΩúÂéüÂàôÔºö
1. ‰ºòÂÖàÂü∫‰∫é‰∏ãÈù¢Êèê‰æõÁöÑÊñáÊ°£ÂÜÖÂÆπÂõûÁ≠îÈóÆÈ¢ò
2. Â¶ÇÊûúÊñáÊ°£‰∏≠Ê≤°ÊúâÁõ∏ÂÖ≥‰ø°ÊÅØÔºåËØ∑ÊòéÁ°ÆËØ¥ÊòéÂπ∂Êèê‰æõ‰∏ÄËà¨ÊÄßÂª∫ËÆÆ
3. ÂõûÁ≠îË¶ÅÂáÜÁ°Æ„ÄÅ‰∏ì‰∏ö„ÄÅÊúâÂ∏ÆÂä©
4. ÂèØ‰ª•ÂºïÁî®ÂÖ∑‰ΩìÁöÑÊñáÊ°£È°µÈù¢ÂíåÈìæÊé•
5. ÊîØÊåÅ‰∏≠Ëã±Êñá‰∫§ÊµÅ

## Áõ∏ÂÖ≥ÊñáÊ°£ÂÜÖÂÆπÔºö
{context}

ËØ∑Âü∫‰∫é‰∏äËø∞ÊñáÊ°£ÂÜÖÂÆπÔºå‰∏ì‰∏öÂú∞ÂõûÁ≠îÁî®Êà∑ÁöÑÈóÆÈ¢ò„ÄÇÂ¶ÇÊûúÊñáÊ°£‰∏≠Ê≤°ÊúâÁõ∏ÂÖ≥‰ø°ÊÅØÔºåËØ∑ËØ¥ÊòéÂπ∂Êèê‰æõ‰∏ÄËà¨ÊÄßÁöÑÂ∏ÆÂä©„ÄÇ
`;

export async function POST(request: Request) {
  try {
    const json = await request.json();
    console.log('Received request body:', json);

    const { messages } = json;

    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      return new Response('Invalid request: messages array is required', {
        status: 400,
      });
    }

    // Ëé∑ÂèñÊúÄÂêé‰∏ÄÊù°Áî®Êà∑Ê∂àÊÅØ‰Ωú‰∏∫Ê£ÄÁ¥¢Êü•ËØ¢
    const lastMessage = messages[messages.length - 1];
    const userQuery = lastMessage?.role === 'user' ? lastMessage.content : '';

    console.log('üîç Starting RAG retrieval for query:', userQuery);

    // ‰ΩøÁî® JSON RAG Ê£ÄÁ¥¢Áõ∏ÂÖ≥ÊñáÊ°£
    let documentContext = 'ÊöÇÊó†Áõ∏ÂÖ≥ÊñáÊ°£ÂÜÖÂÆπ„ÄÇ';
    if (userQuery && userQuery.trim().length > 0) {
      try {
        const sections = await searchDocs(userQuery.trim(), 5);

        if (sections.length > 0) {
          documentContext = formatSections(sections);
          console.log(`‚úÖ RAG found ${sections.length} relevant sections`);
        } else {
          console.log('‚ö†Ô∏è RAG found no relevant sections');
        }
      } catch (ragError) {
        console.error('‚ùå RAG search failed:', ragError);
      }
    }

    // ÊûÑÂª∫Â¢ûÂº∫ÁöÑÁ≥ªÁªüÊèêÁ§∫ËØç
    const enhancedSystemPrompt = systemPromptTemplate.replace(
      '{context}',
      documentContext,
    );

    console.log('ü§ñ Sending enhanced prompt to AI model');
    console.log('Context length:', documentContext.length);
    console.log('documentContext:', documentContext);

    const result = streamText({
      model: deepseek('deepseek-chat'),
      system: enhancedSystemPrompt,
      messages,
      experimental_transform: smoothStream({ chunking: 'word' }),
      experimental_generateMessageId: generateUUID,
      experimental_telemetry: {
        isEnabled: isProductionEnvironment,
        functionId: 'stream-text',
      },
    });

    return result.toDataStreamResponse();
  } catch (error) {
    console.error('Chat API error:', error);
    if (error instanceof ChatSDKError) {
      return error.toResponse();
    }
    return new Response('Internal Server Error', { status: 500 });
  }
}
